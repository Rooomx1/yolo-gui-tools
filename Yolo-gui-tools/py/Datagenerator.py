import os
import tkinter as tk
from tkinter import filedialog, messagebox, colorchooser
from tkinter.ttk import Combobox
import yaml

class DataYAMLGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("YOLO data.yaml Generator")
        self.root.geometry("600x600")

        self.train_path = tk.StringVar()
        self.val_path = tk.StringVar()
        self.test_path = tk.StringVar()
        self.names = []
        self.colors = {}
        self.save_path = tk.StringVar()
        self.name_format = tk.StringVar(value='list')

        tk.Label(root, text="Select Train Folder").pack()
        tk.Entry(root, textvariable=self.train_path, width=60).pack()
        tk.Button(root, text="Browse", command=self.select_train).pack()

        tk.Label(root, text="Select Validation Folder").pack()
        tk.Entry(root, textvariable=self.val_path, width=60).pack()
        tk.Button(root, text="Browse", command=self.select_val).pack()

        tk.Label(root, text="Select Test Folder (Optional)").pack()
        tk.Entry(root, textvariable=self.test_path, width=60).pack()
        tk.Button(root, text="Browse", command=self.select_test).pack()

        tk.Label(root, text="Add Classes").pack()
        self.class_entry = tk.Entry(root, width=30)
        self.class_entry.pack()
        tk.Button(root, text="Add Class", command=self.add_class).pack()

        self.class_listbox = tk.Listbox(root, width=40)
        self.class_listbox.pack()

        tk.Label(root, text="Class Name Format").pack()
        Combobox(root, textvariable=self.name_format, values=["list", "dict"]).pack()

        tk.Label(root, text="Save as...").pack()
        tk.Entry(root, textvariable=self.save_path, width=60).pack()
        tk.Button(root, text="Browse", command=self.select_save_path).pack()

        tk.Button(root, text="Generate data.yaml", command=self.generate_yaml, bg="green", fg="white").pack(pady=10)

    def select_train(self):
        self.train_path.set(filedialog.askdirectory())

    def select_val(self):
        self.val_path.set(filedialog.askdirectory())

    def select_test(self):
        self.test_path.set(filedialog.askdirectory())

    def select_save_path(self):
        file = filedialog.asksaveasfilename(defaultextension=".yaml", filetypes=[("YAML files", "*.yaml")])
        if file:
            self.save_path.set(file)

    def add_class(self):
        class_name = self.class_entry.get()
        if class_name:
            color = colorchooser.askcolor(title=f"Choose color for {class_name}")[0]
            rgb_color = [int(c) for c in color] if color else [255, 255, 255]
            self.names.append(class_name)
            self.colors[len(self.names) - 1] = rgb_color
            self.class_listbox.insert(tk.END, f"{len(self.names)-1}: {class_name} â†’ {rgb_color}")
            self.class_entry.delete(0, tk.END)

    def generate_yaml(self):
        if not self.train_path.get() or not self.val_path.get() or not self.names or not self.save_path.get():
            messagebox.showerror("Error", "Train, Val path, class list, and save path are required.")
            return

        yaml_data = {
            'train': self.train_path.get(),
            'val': self.val_path.get(),
            'nc': len(self.names)
        }

        if self.test_path.get():
            yaml_data['test'] = self.test_path.get()

        if self.name_format.get() == 'list':
            yaml_data['names'] = self.names
        else:
            yaml_data['names'] = {i: name for i, name in enumerate(self.names)}

        yaml_data['colors'] = self.colors

        try:
            with open(self.save_path.get(), 'w') as f:
                f.write("# Auto-generated by YOLO data.yaml Generator\n")
                yaml.dump(yaml_data, f)
            messagebox.showinfo("Success", "data.yaml has been created successfully!")
        except Exception as e:
            messagebox.showerror("Error", str(e))

if __name__ == '__main__':
    root = tk.Tk()
    app = DataYAMLGenerator(root)
    root.mainloop()
